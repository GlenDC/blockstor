package company

//This file is auto-generated by go-raml
//Do not edit this file by hand since it will be overwritten during the next generation

import (
	"github.com/gorilla/mux"
	"github.com/justinas/alice"
	"net/http"
)

// CompaniesInterface is interface for /companies root endpoint
type CompaniesInterface interface { // GetCompanyList is the handler for GET /companies
	// Get companies. Authorization limits are applied to requesting user.
	GetCompanyList(http.ResponseWriter, *http.Request)
	// Post is the handler for POST /companies
	// Register a new company
	Post(http.ResponseWriter, *http.Request)
	// globalIdGet is the handler for GET /companies/{globalId}
	// Get organization info
	globalIdGet(http.ResponseWriter, *http.Request)
	// globalIdPut is the handler for PUT /companies/{globalId}
	// Update existing company. Updating ``globalId`` is not allowed.
	globalIdPut(http.ResponseWriter, *http.Request)
	// globalIdinfoGet is the handler for GET /companies/{globalId}/info
	globalIdinfoGet(http.ResponseWriter, *http.Request)
	// globalIdvalidateGet is the handler for GET /companies/{globalId}/validate
	globalIdvalidateGet(http.ResponseWriter, *http.Request)
	// globalIdcontractsGet is the handler for GET /companies/{globalId}/contracts
	// Get the contracts where the organization is 1 of the parties. Order descending by
	// date.
	globalIdcontractsGet(http.ResponseWriter, *http.Request)
	RegisterNewContract(http.ResponseWriter, *http.Request)
}

// CompaniesInterfaceRoutes is routing for /companies root endpoint
func CompaniesInterfaceRoutes(r *mux.Router, i CompaniesInterface) {
	r.Handle("/companies", alice.New(newOauth2oauth_2_0Middleware([]string{}).Handler).Then(http.HandlerFunc(i.GetCompanyList))).Methods("GET")
	r.Handle("/companies", alice.New(newOauth2oauth_2_0Middleware([]string{}).Handler).Then(http.HandlerFunc(i.Post))).Methods("POST")
	r.Handle("/companies/{globalId}", alice.New(newOauth2oauth_2_0Middleware([]string{"company:read", "company:admin"}).Handler).Then(http.HandlerFunc(i.globalIdGet))).Methods("GET")
	r.Handle("/companies/{globalId}", alice.New(newOauth2oauth_2_0Middleware([]string{"company:admin"}).Handler).Then(http.HandlerFunc(i.globalIdPut))).Methods("PUT")
	r.Handle("/companies/{globalId}/info", alice.New(newOauth2oauth_2_0Middleware([]string{"company:info"}).Handler).Then(http.HandlerFunc(i.globalIdinfoGet))).Methods("GET")
	r.Handle("/companies/{globalId}/validate", alice.New(newOauth2oauth_2_0Middleware([]string{}).Handler).Then(http.HandlerFunc(i.globalIdvalidateGet))).Methods("GET")
	r.Handle("/companies/{globalId}/contracts", alice.New(newOauth2oauth_2_0Middleware([]string{"company:admin", "company:contracts:read"}).Handler).Then(http.HandlerFunc(i.globalIdcontractsGet))).Methods("GET")
	r.Handle("/companies/{globalId}/contracts", alice.New(newOauth2oauth_2_0Middleware([]string{"company:admin", "company:contracts:write"}).Handler).Then(http.HandlerFunc(i.RegisterNewContract))).Methods("POST")
}
