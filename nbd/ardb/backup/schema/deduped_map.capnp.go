// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type DedupedMap struct{ capnp.Struct }

// DedupedMap_TypeID is the unique identifier for the type DedupedMap.
const DedupedMap_TypeID = 0x969c27a0ac21009e

func NewDedupedMap(s *capnp.Segment) (DedupedMap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DedupedMap{st}, err
}

func NewRootDedupedMap(s *capnp.Segment) (DedupedMap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DedupedMap{st}, err
}

func ReadRootDedupedMap(msg *capnp.Message) (DedupedMap, error) {
	root, err := msg.RootPtr()
	return DedupedMap{root.Struct()}, err
}

func (s DedupedMap) String() string {
	str, _ := text.Marshal(0x969c27a0ac21009e, s.Struct)
	return str
}

func (s DedupedMap) Hashes() (IndexHashPair_List, error) {
	p, err := s.Struct.Ptr(0)
	return IndexHashPair_List{List: p.List()}, err
}

func (s DedupedMap) HasHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DedupedMap) SetHashes(v IndexHashPair_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated IndexHashPair_List, preferring placement in s's segment.
func (s DedupedMap) NewHashes(n int32) (IndexHashPair_List, error) {
	l, err := NewIndexHashPair_List(s.Struct.Segment(), n)
	if err != nil {
		return IndexHashPair_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// DedupedMap_List is a list of DedupedMap.
type DedupedMap_List struct{ capnp.List }

// NewDedupedMap creates a new list of DedupedMap.
func NewDedupedMap_List(s *capnp.Segment, sz int32) (DedupedMap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return DedupedMap_List{l}, err
}

func (s DedupedMap_List) At(i int) DedupedMap { return DedupedMap{s.List.Struct(i)} }

func (s DedupedMap_List) Set(i int, v DedupedMap) error { return s.List.SetStruct(i, v.Struct) }

func (s DedupedMap_List) String() string {
	str, _ := text.MarshalList(0x969c27a0ac21009e, s.List)
	return str
}

// DedupedMap_Promise is a wrapper for a DedupedMap promised by a client call.
type DedupedMap_Promise struct{ *capnp.Pipeline }

func (p DedupedMap_Promise) Struct() (DedupedMap, error) {
	s, err := p.Pipeline.Struct()
	return DedupedMap{s}, err
}

type IndexHashPair struct{ capnp.Struct }

// IndexHashPair_TypeID is the unique identifier for the type IndexHashPair.
const IndexHashPair_TypeID = 0xee6d8500acc2a2f2

func NewIndexHashPair(s *capnp.Segment) (IndexHashPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IndexHashPair{st}, err
}

func NewRootIndexHashPair(s *capnp.Segment) (IndexHashPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IndexHashPair{st}, err
}

func ReadRootIndexHashPair(msg *capnp.Message) (IndexHashPair, error) {
	root, err := msg.RootPtr()
	return IndexHashPair{root.Struct()}, err
}

func (s IndexHashPair) String() string {
	str, _ := text.Marshal(0xee6d8500acc2a2f2, s.Struct)
	return str
}

func (s IndexHashPair) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s IndexHashPair) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IndexHashPair) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s IndexHashPair) Index() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s IndexHashPair) SetIndex(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// IndexHashPair_List is a list of IndexHashPair.
type IndexHashPair_List struct{ capnp.List }

// NewIndexHashPair creates a new list of IndexHashPair.
func NewIndexHashPair_List(s *capnp.Segment, sz int32) (IndexHashPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IndexHashPair_List{l}, err
}

func (s IndexHashPair_List) At(i int) IndexHashPair { return IndexHashPair{s.List.Struct(i)} }

func (s IndexHashPair_List) Set(i int, v IndexHashPair) error { return s.List.SetStruct(i, v.Struct) }

func (s IndexHashPair_List) String() string {
	str, _ := text.MarshalList(0xee6d8500acc2a2f2, s.List)
	return str
}

// IndexHashPair_Promise is a wrapper for a IndexHashPair promised by a client call.
type IndexHashPair_Promise struct{ *capnp.Pipeline }

func (p IndexHashPair_Promise) Struct() (IndexHashPair, error) {
	s, err := p.Pipeline.Struct()
	return IndexHashPair{s}, err
}

const schema_df6eb9a04e9bc070 = "x\xda|\x8d?J;A\x00\x85\xdf\x9b\xd9\xf9%\xcd" +
	"\xfe\xcc\xb2\x82\xa6\x12%\xe0\x1fX5j\xe3\x82\xac\x85" +
	"\x85\x16\xca\xce\x09d\xc8\x0el\x8a]\x06\x17\xd1\x0b\xe4" +
	"\x0a6\x8a\x04\xeb\\\xc0N\xbc\x887P\xb4\x0f\x91A" +
	"\xb4\xb0\xb0{|<\xbe\xaf3:\x14}\xb5 \x00\xbd" +
	"\xa8\xfeM\xef\x97'\xe3\xd5\xbb\x9b\xa8\xcb\x99{\xba=" +
	"\x1b?\xd6/Pl\x01\xfd\xf7\x15\xc6\xf4+\x9af\xe0" +
	"\xdb\xc7\xc3\xf3dT\xbd\xea.\x7f?w\x13\xa6\x8c\x0f" +
	"\xfc\x8c\xf7y\x85d\xd6\x0cJ[\x99\xadB\xda\xe2\xd2" +
	"\xd9\xe2\xbc2ns`\\\xed\xd2\xa3/\xd2:5." +
	"'u \x03  \x10\x85)\xa0\xdb\x92\xba'\x98\x95" +
	"\xa6)m\xc3\xff`.\xc9\xcew\x1b\xf4\xe8\x0f\xfbI" +
	"]\xd8\xebc\x935en\x86\x17>\xd0\xfe\x09\xaco" +
	"\x00\xba'\xa9\xb7\x05\xc9yz\x96\xec\x00zMR\xef" +
	"\x09\xce\xf9(C\x08\x86\xe0\xd2\xd0\x9b\xa8 \xa8\xc0\xcf" +
	"\x00\x00\x00\xff\xffl\xd7M\x8c"

func init() {
	schemas.Register(schema_df6eb9a04e9bc070,
		0x969c27a0ac21009e,
		0xee6d8500acc2a2f2)
}
