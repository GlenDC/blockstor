// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ClientVerAck struct{ capnp.Struct }

// ClientVerAck_TypeID is the unique identifier for the type ClientVerAck.
const ClientVerAck_TypeID = 0x89f8da619fcbb3f3

func NewClientVerAck(s *capnp.Segment) (ClientVerAck, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ClientVerAck{st}, err
}

func NewRootClientVerAck(s *capnp.Segment) (ClientVerAck, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ClientVerAck{st}, err
}

func ReadRootClientVerAck(msg *capnp.Message) (ClientVerAck, error) {
	root, err := msg.RootPtr()
	return ClientVerAck{root.Struct()}, err
}

func (s ClientVerAck) String() string {
	str, _ := text.Marshal(0x89f8da619fcbb3f3, s.Struct)
	return str
}

func (s ClientVerAck) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s ClientVerAck) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ClientVerAck) VdiskID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ClientVerAck) HasVdiskID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ClientVerAck) VdiskIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ClientVerAck) SetVdiskID(v string) error {
	return s.Struct.SetText(0, v)
}

// ClientVerAck_List is a list of ClientVerAck.
type ClientVerAck_List struct{ capnp.List }

// NewClientVerAck creates a new list of ClientVerAck.
func NewClientVerAck_List(s *capnp.Segment, sz int32) (ClientVerAck_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ClientVerAck_List{l}, err
}

func (s ClientVerAck_List) At(i int) ClientVerAck { return ClientVerAck{s.List.Struct(i)} }

func (s ClientVerAck_List) Set(i int, v ClientVerAck) error { return s.List.SetStruct(i, v.Struct) }

// ClientVerAck_Promise is a wrapper for a ClientVerAck promised by a client call.
type ClientVerAck_Promise struct{ *capnp.Pipeline }

func (p ClientVerAck_Promise) Struct() (ClientVerAck, error) {
	s, err := p.Pipeline.Struct()
	return ClientVerAck{s}, err
}

type ServerVerAck struct{ capnp.Struct }

// ServerVerAck_TypeID is the unique identifier for the type ServerVerAck.
const ServerVerAck_TypeID = 0xb0f1edca577182a7

func NewServerVerAck(s *capnp.Segment) (ServerVerAck, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServerVerAck{st}, err
}

func NewRootServerVerAck(s *capnp.Segment) (ServerVerAck, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServerVerAck{st}, err
}

func ReadRootServerVerAck(msg *capnp.Message) (ServerVerAck, error) {
	root, err := msg.RootPtr()
	return ServerVerAck{root.Struct()}, err
}

func (s ServerVerAck) String() string {
	str, _ := text.Marshal(0xb0f1edca577182a7, s.Struct)
	return str
}

func (s ServerVerAck) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s ServerVerAck) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ServerVerAck) Status() int8 {
	return int8(s.Struct.Uint8(4))
}

func (s ServerVerAck) SetStatus(v int8) {
	s.Struct.SetUint8(4, uint8(v))
}

// ServerVerAck_List is a list of ServerVerAck.
type ServerVerAck_List struct{ capnp.List }

// NewServerVerAck creates a new list of ServerVerAck.
func NewServerVerAck_List(s *capnp.Segment, sz int32) (ServerVerAck_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ServerVerAck_List{l}, err
}

func (s ServerVerAck_List) At(i int) ServerVerAck { return ServerVerAck{s.List.Struct(i)} }

func (s ServerVerAck_List) Set(i int, v ServerVerAck) error { return s.List.SetStruct(i, v.Struct) }

// ServerVerAck_Promise is a wrapper for a ServerVerAck promised by a client call.
type ServerVerAck_Promise struct{ *capnp.Pipeline }

func (p ServerVerAck_Promise) Struct() (ServerVerAck, error) {
	s, err := p.Pipeline.Struct()
	return ServerVerAck{s}, err
}

type TlogResponse struct{ capnp.Struct }

// TlogResponse_TypeID is the unique identifier for the type TlogResponse.
const TlogResponse_TypeID = 0x98d11ae1c78a24d9

func NewTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func NewRootTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func ReadRootTlogResponse(msg *capnp.Message) (TlogResponse, error) {
	root, err := msg.RootPtr()
	return TlogResponse{root.Struct()}, err
}

func (s TlogResponse) String() string {
	str, _ := text.Marshal(0x98d11ae1c78a24d9, s.Struct)
	return str
}

func (s TlogResponse) Status() int8 {
	return int8(s.Struct.Uint8(0))
}

func (s TlogResponse) SetStatus(v int8) {
	s.Struct.SetUint8(0, uint8(v))
}

func (s TlogResponse) Sequences() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s TlogResponse) HasSequences() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogResponse) SetSequences(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSequences sets the sequences field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s TlogResponse) NewSequences(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TlogResponse_List is a list of TlogResponse.
type TlogResponse_List struct{ capnp.List }

// NewTlogResponse creates a new list of TlogResponse.
func NewTlogResponse_List(s *capnp.Segment, sz int32) (TlogResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TlogResponse_List{l}, err
}

func (s TlogResponse_List) At(i int) TlogResponse { return TlogResponse{s.List.Struct(i)} }

func (s TlogResponse_List) Set(i int, v TlogResponse) error { return s.List.SetStruct(i, v.Struct) }

// TlogResponse_Promise is a wrapper for a TlogResponse promised by a client call.
type TlogResponse_Promise struct{ *capnp.Pipeline }

func (p TlogResponse_Promise) Struct() (TlogResponse, error) {
	s, err := p.Pipeline.Struct()
	return TlogResponse{s}, err
}

type TlogBlock struct{ capnp.Struct }

// TlogBlock_TypeID is the unique identifier for the type TlogBlock.
const TlogBlock_TypeID = 0x8cf178de3c82d431

func NewTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return TlogBlock{st}, err
}

func NewRootTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return TlogBlock{st}, err
}

func ReadRootTlogBlock(msg *capnp.Message) (TlogBlock, error) {
	root, err := msg.RootPtr()
	return TlogBlock{root.Struct()}, err
}

func (s TlogBlock) String() string {
	str, _ := text.Marshal(0x8cf178de3c82d431, s.Struct)
	return str
}

func (s TlogBlock) Sequence() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogBlock) SetSequence(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogBlock) Lba() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogBlock) SetLba(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TlogBlock) Size() uint64 {
	return s.Struct.Uint64(16)
}

func (s TlogBlock) SetSize(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s TlogBlock) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TlogBlock) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TlogBlock) Timestamp() uint64 {
	return s.Struct.Uint64(24)
}

func (s TlogBlock) SetTimestamp(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s TlogBlock) Operation() uint8 {
	return s.Struct.Uint8(32)
}

func (s TlogBlock) SetOperation(v uint8) {
	s.Struct.SetUint8(32, v)
}

// TlogBlock_List is a list of TlogBlock.
type TlogBlock_List struct{ capnp.List }

// NewTlogBlock creates a new list of TlogBlock.
func NewTlogBlock_List(s *capnp.Segment, sz int32) (TlogBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return TlogBlock_List{l}, err
}

func (s TlogBlock_List) At(i int) TlogBlock { return TlogBlock{s.List.Struct(i)} }

func (s TlogBlock_List) Set(i int, v TlogBlock) error { return s.List.SetStruct(i, v.Struct) }

// TlogBlock_Promise is a wrapper for a TlogBlock promised by a client call.
type TlogBlock_Promise struct{ *capnp.Pipeline }

func (p TlogBlock_Promise) Struct() (TlogBlock, error) {
	s, err := p.Pipeline.Struct()
	return TlogBlock{s}, err
}

type TlogAggregation struct{ capnp.Struct }

// TlogAggregation_TypeID is the unique identifier for the type TlogAggregation.
const TlogAggregation_TypeID = 0xe46ab5b4b619e094

func NewTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return TlogAggregation{st}, err
}

func NewRootTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return TlogAggregation{st}, err
}

func ReadRootTlogAggregation(msg *capnp.Message) (TlogAggregation, error) {
	root, err := msg.RootPtr()
	return TlogAggregation{root.Struct()}, err
}

func (s TlogAggregation) String() string {
	str, _ := text.Marshal(0xe46ab5b4b619e094, s.Struct)
	return str
}

func (s TlogAggregation) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TlogAggregation) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TlogAggregation) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogAggregation) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogAggregation) Timestamp() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogAggregation) SetTimestamp(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TlogAggregation) VdiskID() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s TlogAggregation) HasVdiskID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) VdiskIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetVdiskID(v string) error {
	return s.Struct.SetText(1, v)
}

func (s TlogAggregation) Blocks() (TlogBlock_List, error) {
	p, err := s.Struct.Ptr(2)
	return TlogBlock_List{List: p.List()}, err
}

func (s TlogAggregation) HasBlocks() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetBlocks(v TlogBlock_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewBlocks sets the blocks field to a newly
// allocated TlogBlock_List, preferring placement in s's segment.
func (s TlogAggregation) NewBlocks(n int32) (TlogBlock_List, error) {
	l, err := NewTlogBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return TlogBlock_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s TlogAggregation) Prev() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s TlogAggregation) HasPrev() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetPrev(v []byte) error {
	return s.Struct.SetData(3, v)
}

// TlogAggregation_List is a list of TlogAggregation.
type TlogAggregation_List struct{ capnp.List }

// NewTlogAggregation creates a new list of TlogAggregation.
func NewTlogAggregation_List(s *capnp.Segment, sz int32) (TlogAggregation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return TlogAggregation_List{l}, err
}

func (s TlogAggregation_List) At(i int) TlogAggregation { return TlogAggregation{s.List.Struct(i)} }

func (s TlogAggregation_List) Set(i int, v TlogAggregation) error {
	return s.List.SetStruct(i, v.Struct)
}

// TlogAggregation_Promise is a wrapper for a TlogAggregation promised by a client call.
type TlogAggregation_Promise struct{ *capnp.Pipeline }

func (p TlogAggregation_Promise) Struct() (TlogAggregation, error) {
	s, err := p.Pipeline.Struct()
	return TlogAggregation{s}, err
}

const schema_f4533cbae6e08506 = "x\xda\x84TMH\x14a\x18~\x9f\xef\x9bY\x15\xd4" +
	"m\xd8=\xa4\x04Fx\xa8\xc8R\xeb$\x82i\x1d\xca" +
	"\x93\x9fF\x1ec\\?\xd6\xcd\xdd\x99ufv\x8b " +
	"$\xc1\x83Qt\xf1`\x87\xc8@\xa8\xa0@H#\xa2" +
	"\xc0\xc0\xe8\xcf\xa0\xc0\xa0\x82\xc2 \x82\x0e\x1e\xa4\x0eu" +
	"\x9a\xf8v\x9du\xdb6\xbd\xbd\xef\xc33\xef\xf3\xfe<" +
	"\xf35\xcf\xe30k\xd1\x1b8\x91h\xd4C\xfe\x8f{" +
	"\xaf\xae\x9b\x1f\x7fM\x90\xa8\x03\xfc\xd0\xf8\xca\xb7\x87\xed" +
	"}?IG\x05\xd1\xc1\x0cZ\x11\x19Wa\xe4\x02\xce" +
	"\x10\xfc\x96\xe5\xb1\xf6\xcfg\xd7.)\xb6^\xc4f\x8a" +
	"\xfd\x09\xf5\x88\xac\xe6>\xfc\x8e+ \xf8\x1f\x1a/>" +
	"\xfbR\xffv\xaal\xf1\xf3\xbc\x15\x91\xcb\\\x15\x9f\xe0" +
	"\xaa\xf8\xcd\xb1\x91\xfe\x97\xabk\xb3%lM\x91\x7f+" +
	"r\x95\x0a#\xba\xa6\xc8\x93+u\xf7\xe7\xe6O\x7fU" +
	"dVT:\xc76\xb5nD2\xb9pD\xeb\x075" +
	"\xf9nlH\xa6\xcc\x03\x1eO\xda\xf1S\xf9d\x7f\xcc" +
	"L[\xe9\xb6#\xc9\x84\xb4\xbc\x93\x0d\xd2\xe9\x8c\x0d\xf7" +
	"\x00\xa2\x92kD\x1a\x88\x8c=]jI\x1c\xa2\x99\x01" +
	"\x88BaM\x0a\xdb\xcd!\x0e1\x8cf\xa5\xe3&l" +
	"\x0b\x95\xc4PI\x18\xcd\x0e&\xdc\xe1\xe3GQM\x0c" +
	"\xd5\x84MTO$\xedxW\xd2\xe6y\xc9\x1d\x05\xc9" +
	"\xf9n\"1\xc7!\x16\x18\x8c@\xf3\xf1.\"\xf1\x80" +
	"C,2\x18\x8cE\xc1\x88\x8c'{\x89\xc4#\x0e\xf1" +
	"\x9c\x01<\x0aNd<U\xd8\x02\x87Xb04D" +
	"\xa1\x11\x19/\x14\xb8\xc8!\xde0\x18:\x8fB'2" +
	"^\xf7\x12\x89%\x0e\xf1\x9e\xc1\x08\xed\x8c\"Dd\xbc" +
	"S\xe02\x87Xa\xf0]9\x92\x91VL\x12\x11\xaa" +
	"\x88\xa1\x8aP\x91\x1c0\x838\xec&\xce\xc9B2d" +
	"\xbaC\xa8!\x86\x1aBx\xd0\xf4\xcc \xf1\xbdDJ" +
	"\xba\x9e\x99\"\xa4\x03\xb6o\xa7\xa5cz\x09\x9b`!" +
	"D\x0c\xa1-W\xd5+\xdd\x86\xb4m\xb9\xb2\xe4@m" +
	"e\x0e\xa4\x86\xd8\xc7!\x8e1t\xb8\x9e\xe9e\\0" +
	"b`T4\x13\\\xd4\x12z8r=\xd5n\xaa\xdf" +
	"'\x9d\xact\xb64\x88\x01m\xbd\x81\xb6\xff;\xe4\x9f" +
	"\x86\xd6U\xb5\xb2Sw\xc6\xe3\x8e\x8c\xabMYDJ" +
	"y{A\xf9\xaa:\xea$\x87\x98\xde\x98\xfc\x9a\xc2\xa6" +
	"8\xc4\x8c\xb2\x09\xf26\xb9\xa1\xd61\xcd!\xee0\x18" +
	"\x1cy\x9f\xdcV}\xcfp\x88Y\xe5\x13\x96\xf7\xc9]" +
	"\xd5\xf7\xadu\x97\x05>)vY\xd82S2\xf0\xf6" +
	"_\xf7/w\xe5\xd2\x9f\xa1c i\xc7\x86\x0b{\xdf" +
	"\xb6\xf1\x96\x10\x14\x18N;2\x1b\xd8\xe6O\x00\x00\x00" +
	"\xff\xff;\x9e\x12\x88"

func init() {
	schemas.Register(schema_f4533cbae6e08506,
		0x89f8da619fcbb3f3,
		0x8cf178de3c82d431,
		0x98d11ae1c78a24d9,
		0xb0f1edca577182a7,
		0xe46ab5b4b619e094)
}
