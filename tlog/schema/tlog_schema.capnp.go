// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type TlogResponse struct{ capnp.Struct }

// TlogResponse_TypeID is the unique identifier for the type TlogResponse.
const TlogResponse_TypeID = 0x98d11ae1c78a24d9

func NewTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func NewRootTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func ReadRootTlogResponse(msg *capnp.Message) (TlogResponse, error) {
	root, err := msg.RootPtr()
	return TlogResponse{root.Struct()}, err
}

func (s TlogResponse) String() string {
	str, _ := text.Marshal(0x98d11ae1c78a24d9, s.Struct)
	return str
}

func (s TlogResponse) Status() int8 {
	return int8(s.Struct.Uint8(0))
}

func (s TlogResponse) SetStatus(v int8) {
	s.Struct.SetUint8(0, uint8(v))
}

func (s TlogResponse) Sequences() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s TlogResponse) HasSequences() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogResponse) SetSequences(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSequences sets the sequences field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s TlogResponse) NewSequences(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TlogResponse_List is a list of TlogResponse.
type TlogResponse_List struct{ capnp.List }

// NewTlogResponse creates a new list of TlogResponse.
func NewTlogResponse_List(s *capnp.Segment, sz int32) (TlogResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TlogResponse_List{l}, err
}

func (s TlogResponse_List) At(i int) TlogResponse { return TlogResponse{s.List.Struct(i)} }

func (s TlogResponse_List) Set(i int, v TlogResponse) error { return s.List.SetStruct(i, v.Struct) }

// TlogResponse_Promise is a wrapper for a TlogResponse promised by a client call.
type TlogResponse_Promise struct{ *capnp.Pipeline }

func (p TlogResponse_Promise) Struct() (TlogResponse, error) {
	s, err := p.Pipeline.Struct()
	return TlogResponse{s}, err
}

type TlogBlock struct{ capnp.Struct }

// TlogBlock_TypeID is the unique identifier for the type TlogBlock.
const TlogBlock_TypeID = 0x8cf178de3c82d431

func NewTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return TlogBlock{st}, err
}

func NewRootTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return TlogBlock{st}, err
}

func ReadRootTlogBlock(msg *capnp.Message) (TlogBlock, error) {
	root, err := msg.RootPtr()
	return TlogBlock{root.Struct()}, err
}

func (s TlogBlock) String() string {
	str, _ := text.Marshal(0x8cf178de3c82d431, s.Struct)
	return str
}

func (s TlogBlock) Sequence() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogBlock) SetSequence(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogBlock) Lba() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogBlock) SetLba(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TlogBlock) Size() uint64 {
	return s.Struct.Uint64(16)
}

func (s TlogBlock) SetSize(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s TlogBlock) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TlogBlock) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TlogBlock) Timestamp() uint64 {
	return s.Struct.Uint64(24)
}

func (s TlogBlock) SetTimestamp(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s TlogBlock) Operation() uint8 {
	return s.Struct.Uint8(32)
}

func (s TlogBlock) SetOperation(v uint8) {
	s.Struct.SetUint8(32, v)
}

// TlogBlock_List is a list of TlogBlock.
type TlogBlock_List struct{ capnp.List }

// NewTlogBlock creates a new list of TlogBlock.
func NewTlogBlock_List(s *capnp.Segment, sz int32) (TlogBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return TlogBlock_List{l}, err
}

func (s TlogBlock_List) At(i int) TlogBlock { return TlogBlock{s.List.Struct(i)} }

func (s TlogBlock_List) Set(i int, v TlogBlock) error { return s.List.SetStruct(i, v.Struct) }

// TlogBlock_Promise is a wrapper for a TlogBlock promised by a client call.
type TlogBlock_Promise struct{ *capnp.Pipeline }

func (p TlogBlock_Promise) Struct() (TlogBlock, error) {
	s, err := p.Pipeline.Struct()
	return TlogBlock{s}, err
}

type TlogClientPackage struct{ capnp.Struct }

// TlogClientPackage_TypeID is the unique identifier for the type TlogClientPackage.
const TlogClientPackage_TypeID = 0xa77849c1e50404ed

func NewTlogClientPackage(s *capnp.Segment) (TlogClientPackage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TlogClientPackage{st}, err
}

func NewRootTlogClientPackage(s *capnp.Segment) (TlogClientPackage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TlogClientPackage{st}, err
}

func ReadRootTlogClientPackage(msg *capnp.Message) (TlogClientPackage, error) {
	root, err := msg.RootPtr()
	return TlogClientPackage{root.Struct()}, err
}

func (s TlogClientPackage) String() string {
	str, _ := text.Marshal(0xa77849c1e50404ed, s.Struct)
	return str
}

func (s TlogClientPackage) VdiskID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TlogClientPackage) HasVdiskID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogClientPackage) VdiskIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TlogClientPackage) SetVdiskID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TlogClientPackage) Block() (TlogBlock, error) {
	p, err := s.Struct.Ptr(1)
	return TlogBlock{Struct: p.Struct()}, err
}

func (s TlogClientPackage) HasBlock() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogClientPackage) SetBlock(v TlogBlock) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated TlogBlock struct, preferring placement in s's segment.
func (s TlogClientPackage) NewBlock() (TlogBlock, error) {
	ss, err := NewTlogBlock(s.Struct.Segment())
	if err != nil {
		return TlogBlock{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// TlogClientPackage_List is a list of TlogClientPackage.
type TlogClientPackage_List struct{ capnp.List }

// NewTlogClientPackage creates a new list of TlogClientPackage.
func NewTlogClientPackage_List(s *capnp.Segment, sz int32) (TlogClientPackage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TlogClientPackage_List{l}, err
}

func (s TlogClientPackage_List) At(i int) TlogClientPackage {
	return TlogClientPackage{s.List.Struct(i)}
}

func (s TlogClientPackage_List) Set(i int, v TlogClientPackage) error {
	return s.List.SetStruct(i, v.Struct)
}

// TlogClientPackage_Promise is a wrapper for a TlogClientPackage promised by a client call.
type TlogClientPackage_Promise struct{ *capnp.Pipeline }

func (p TlogClientPackage_Promise) Struct() (TlogClientPackage, error) {
	s, err := p.Pipeline.Struct()
	return TlogClientPackage{s}, err
}

func (p TlogClientPackage_Promise) Block() TlogBlock_Promise {
	return TlogBlock_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type TlogAggregation struct{ capnp.Struct }

// TlogAggregation_TypeID is the unique identifier for the type TlogAggregation.
const TlogAggregation_TypeID = 0xe46ab5b4b619e094

func NewTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return TlogAggregation{st}, err
}

func NewRootTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return TlogAggregation{st}, err
}

func ReadRootTlogAggregation(msg *capnp.Message) (TlogAggregation, error) {
	root, err := msg.RootPtr()
	return TlogAggregation{root.Struct()}, err
}

func (s TlogAggregation) String() string {
	str, _ := text.Marshal(0xe46ab5b4b619e094, s.Struct)
	return str
}

func (s TlogAggregation) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TlogAggregation) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TlogAggregation) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogAggregation) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogAggregation) Timestamp() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogAggregation) SetTimestamp(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TlogAggregation) VdiskID() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s TlogAggregation) HasVdiskID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) VdiskIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetVdiskID(v string) error {
	return s.Struct.SetText(1, v)
}

func (s TlogAggregation) Blocks() (TlogBlock_List, error) {
	p, err := s.Struct.Ptr(2)
	return TlogBlock_List{List: p.List()}, err
}

func (s TlogAggregation) HasBlocks() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetBlocks(v TlogBlock_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewBlocks sets the blocks field to a newly
// allocated TlogBlock_List, preferring placement in s's segment.
func (s TlogAggregation) NewBlocks(n int32) (TlogBlock_List, error) {
	l, err := NewTlogBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return TlogBlock_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s TlogAggregation) Prev() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s TlogAggregation) HasPrev() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetPrev(v []byte) error {
	return s.Struct.SetData(3, v)
}

// TlogAggregation_List is a list of TlogAggregation.
type TlogAggregation_List struct{ capnp.List }

// NewTlogAggregation creates a new list of TlogAggregation.
func NewTlogAggregation_List(s *capnp.Segment, sz int32) (TlogAggregation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return TlogAggregation_List{l}, err
}

func (s TlogAggregation_List) At(i int) TlogAggregation { return TlogAggregation{s.List.Struct(i)} }

func (s TlogAggregation_List) Set(i int, v TlogAggregation) error {
	return s.List.SetStruct(i, v.Struct)
}

// TlogAggregation_Promise is a wrapper for a TlogAggregation promised by a client call.
type TlogAggregation_Promise struct{ *capnp.Pipeline }

func (p TlogAggregation_Promise) Struct() (TlogAggregation, error) {
	s, err := p.Pipeline.Struct()
	return TlogAggregation{s}, err
}

const schema_f4533cbae6e08506 = "x\xda\x84\x92OHT]\x18\xc6\x9f\xe7\xbcw\xc6O" +
	"P\xc7\xcb\xcc\xe2S>P>\\Td\xf9\xa7\x95\x08" +
	"\x96\xb5HW\x1e+\xa26q\x1d/\xe34\x7f\xf3^" +
	"\xcd\xda\x04A-\"h\xe3\xc2\x16\x81\x81PAA\x0b" +
	"\x8d\x88\x02\x05\xc3\x02\x83\x04\x83\xda\x84B\x06-Z\x04" +
	"\xb5hu\xe38\xddq\x14\xc1\xddy_\x9es\xce\xf3" +
	">\xef\xaf\xed&\x8f\xaa\xf6\xc8\x92\x02ts$\x1a\xb4" +
	"\xaf^\xef\xfe<\xf1\xe36t\x03#A\xf4\xc6\xda\xd7" +
	"\x17\xdd\xa7~\"\xa2\xaa\x80\xce>62~\x8e\xe6x" +
	"\x86w\x08\x06\x9fZn-\xad7\xaeL\x199+\xe4" +
	"\x9b\x9ao\xaa\x83\xf1\xdf\xe6f\xfc\x97\xba\x0c\x06\xdf-" +
	"kc\xa1o\xe2\x01\xec\x06\xee|\xdb\x95\xf3\x8c_\x11" +
	"#\x1e\x13#\x9e\\kx6;w\xf1\x8byZU" +
	"\xa8-\xa3^\x91~\xc67\x8c\xbas]\xce\x12\xad\x81" +
	"\x97\x1cqs\xcea_\xb2\x85\xd4\x85Rq(\xe9\x14" +
	"\xf3\xc5\xae\xd3\xd9B\xaa7[\x90df\x80\xd4\xff\x89" +
	"\x05X\x04\xec\xb9~@\xcf\x0a\xf5\xbc\xa2M&h\x9a" +
	"\xaf\xfe\x07\xf4s\xa1^T\xb4\x95JP\x01\xf6\xc2\x01" +
	"@\xbf\x14\xea7\x8a\x94\x04\x05\xb0_\x9b\xde\xbcP/" +
	"+\xda\x16\x13\xb4\x00\xfb\xadi.\x0a\xf5{E;\"" +
	"\x09F\x00\xfb\xdd \xa0\x97\x85\xfa\xa3\xa2\x1dmN0" +
	"\x0a\xd8\x1fLsU\xa8\xd7\x14\x03\xcf\xbd4\xe6\xe6\x93" +
	".\x00VC\xb1\x1a\xac\xca\x0e9\xe19\xe6\xa5\xaf\xba" +
	"\xe5b\xc4\xf1FX\x0b\xc5Z06\xec\xf8NX\x04" +
	"~:\xe7z\xbe\x93\x03\x8b\xa1:(\x14\xddQ\xc7O" +
	"\x17\xc0<\xa3P\x8c\x82{D5\xe8zM\xc5B\xde" +
	"sMZ\xff\x94\xd3\xda\xdf\x05\xe8\x16\xa1nS\x0c\xc3" +
	"j5C\x1c\x14\xea\x93\x8a=\x9e\xef\xf8c\x1e\x15\x14" +
	"\x15*f\xa2\xc7:p@\xb8\xe9\xa9\xae\xe2\x7fk\xd7" +
	"\xff\x8fg\xd3n\xde\x1fp\x92\x19GR;M\xf4n" +
	"\x99(\xaf\xac\xb5\x03\xd0\xfb\x84\xfa\x88\xe2\xb5\xf1\xe1\xb4" +
	"\x97\xe9;\xc1\x1a(\xd6\x80MC\xd9B2\xc3\xfa-" +
	"\xaeA\xd6\xef\xe9\xe1X*5\xea\xa6Lny\xc0X" +
	"\xf8\xb7l\xe1\xaeY\xf1\xa4POo\xe5p\xcf\xf4\xa6" +
	"\x84z\xc6@\xc3\x124\xf7M8\xd3B\xfdX\xd1\x16" +
	"\x96\xa8yd\x06\x98\x11\xea\xa7\x86\x1aU\xa2\xe6\x89\x89" +
	"\xf6\xe1_\xe6Bj*\x99\x8b\xe5\x9d\x9c\x1b\x8e\xb4\x8d" +
	"\x86\xddv\xbe3\x83\x9e\xcd\x0c\xca[\xd8\x9eE\x1d\x18" +
	"+\x8e\xba\xe3!D\x7f\x02\x00\x00\xff\xff Y\xef\xb5"

func init() {
	schemas.Register(schema_f4533cbae6e08506,
		0x8cf178de3c82d431,
		0x98d11ae1c78a24d9,
		0xa77849c1e50404ed,
		0xe46ab5b4b619e094)
}
